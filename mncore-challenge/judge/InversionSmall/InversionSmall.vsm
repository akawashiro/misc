# Generate literal 0 to 15 into $lr0-$lr31
imm i"4" $s1
imm i"0" $r1
imm i"1" $r3
imm i"2" $r5
imm i"3" $r7
nop/2
ladd $ls0 $lr0v $lr8v
ladd $ls0 $aluf $lr16v
ladd $ls0 $aluf $lr24v

# Save MAB ID into $ls256
lpassa $mabid $ls256

# Save pivot - 1 into $lr128
ladd $mabid $aluf $lt
nop/2
ldec $lmt $lr128

# Generate cycle masks for each MAB
# MAB0:  1111111111111111
# MAB1:  0111111111111111
# ...
# MAB15: 0000000000000000
lsub $lr0v $ls256 $omr1
lsub $lr8v $ls256 $omr2
lsub $lr16v $ls256 $omr3
lsub $lr24v $ls256 $omr4
# d getd $omr1n0c0b0m2p0 4

# Calculate inversion flags without masks
lsub $lr128 $lm0v $omr5
lsub $lr128 $lm8v $omr6
lsub $lr128 $lm16v $omr7
lsub $lr128 $lm24v $omr8

lpassa $lr2 $ls100v/$imr5
lpassa $lr2 $ls108v/$imr6
lpassa $lr2 $ls116v/$imr7
lpassa $lr2 $ls124v/$imr8
# d getd $ls100n0c0b0m2p0 16

# ls200-ls232 B@MAB, lr200-lr232 B@MAB
lpassa $ls100v $ls200v/$imr1 $lr200v/$imr1
lpassa $ls108v $ls208v/$imr2 $lr208v/$imr2
lpassa $ls116v $ls216v/$imr3 $lr216v/$imr3
lpassa $ls124v $ls224v/$imr4 $lr224v/$imr4

ladd $ls200v $lr208v $ls232v $lr232v
ladd $ls216v $lr224v $ls240v $lr240v
ladd $lr232 $ln0 $nowrite # ln0 is zero
ladd $lr234 $aluf $nowrite
ladd $lr236 $aluf $nowrite
ladd $lr238 $aluf $nowrite
ladd $lr240 $aluf $nowrite
ladd $lr242 $aluf $nowrite
ladd $lr244 $aluf $nowrite
ladd $lr246 $aluf $nowrite

l1bmrliadd $aluf $lb0
nop/2
l1bmp $lb0 $ln0
